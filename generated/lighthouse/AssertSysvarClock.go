// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lighthouse

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AssertSysvarClock is the `AssertSysvarClock` instruction.
type AssertSysvarClock struct {
	LogLevel  *LogLevel
	Assertion *SysvarClockAssertion

	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAssertSysvarClockInstructionBuilder creates a new `AssertSysvarClock` instruction builder.
func NewAssertSysvarClockInstructionBuilder() *AssertSysvarClock {
	nd := &AssertSysvarClock{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 0),
	}
	return nd
}

// SetLogLevel sets the "logLevel" parameter.
func (inst *AssertSysvarClock) SetLogLevel(logLevel LogLevel) *AssertSysvarClock {
	inst.LogLevel = &logLevel
	return inst
}

// SetAssertion sets the "assertion" parameter.
func (inst *AssertSysvarClock) SetAssertion(assertion SysvarClockAssertion) *AssertSysvarClock {
	inst.Assertion = &assertion
	return inst
}

func (inst AssertSysvarClock) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AssertSysvarClock,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AssertSysvarClock) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AssertSysvarClock) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LogLevel == nil {
			return errors.New("LogLevel parameter is not set")
		}
		if inst.Assertion == nil {
			return errors.New("Assertion parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
	}
	return nil
}

func (inst *AssertSysvarClock) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AssertSysvarClock")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" LogLevel", *inst.LogLevel))
						paramsBranch.Child(ag_format.Param("Assertion", *inst.Assertion))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=0]").ParentFunc(func(accountsBranch ag_treeout.Branches) {})
				})
		})
}

func (obj AssertSysvarClock) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LogLevel` param:
	err = encoder.Encode(obj.LogLevel)
	if err != nil {
		return err
	}
	// Serialize `Assertion` param:
	err = encoder.Encode(obj.Assertion)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AssertSysvarClock) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LogLevel`:
	err = decoder.Decode(&obj.LogLevel)
	if err != nil {
		return err
	}
	// Deserialize `Assertion`:
	err = decoder.Decode(&obj.Assertion)
	if err != nil {
		return err
	}
	return nil
}

// NewAssertSysvarClockInstruction declares a new AssertSysvarClock instruction with the provided parameters and accounts.
func NewAssertSysvarClockInstruction(
	// Parameters:
	logLevel LogLevel,
	assertion SysvarClockAssertion) *AssertSysvarClock {
	return NewAssertSysvarClockInstructionBuilder().
		SetLogLevel(logLevel).
		SetAssertion(assertion)
}
