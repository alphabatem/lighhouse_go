// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lighthouse

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AssertMerkleTreeAccount is the `AssertMerkleTreeAccount` instruction.
type AssertMerkleTreeAccount struct {
	LogLevel  *LogLevel
	Assertion *MerkleTreeAssertion

	// [0] = [] targetMerkleTree
	// ··········· Target merkle tree account to be asserted
	//
	// [1] = [] root
	// ··········· The current root of the merkle tree
	//
	// [2] = [] splAccountCompression
	// ··········· SPL account compression program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAssertMerkleTreeAccountInstructionBuilder creates a new `AssertMerkleTreeAccount` instruction builder.
func NewAssertMerkleTreeAccountInstructionBuilder() *AssertMerkleTreeAccount {
	nd := &AssertMerkleTreeAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetLogLevel sets the "logLevel" parameter.
func (inst *AssertMerkleTreeAccount) SetLogLevel(logLevel LogLevel) *AssertMerkleTreeAccount {
	inst.LogLevel = &logLevel
	return inst
}

// SetAssertion sets the "assertion" parameter.
func (inst *AssertMerkleTreeAccount) SetAssertion(assertion MerkleTreeAssertion) *AssertMerkleTreeAccount {
	inst.Assertion = &assertion
	return inst
}

// SetTargetMerkleTreeAccount sets the "targetMerkleTree" account.
// Target merkle tree account to be asserted
func (inst *AssertMerkleTreeAccount) SetTargetMerkleTreeAccount(targetMerkleTree ag_solanago.PublicKey) *AssertMerkleTreeAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(targetMerkleTree)
	return inst
}

// GetTargetMerkleTreeAccount gets the "targetMerkleTree" account.
// Target merkle tree account to be asserted
func (inst *AssertMerkleTreeAccount) GetTargetMerkleTreeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRootAccount sets the "root" account.
// The current root of the merkle tree
func (inst *AssertMerkleTreeAccount) SetRootAccount(root ag_solanago.PublicKey) *AssertMerkleTreeAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(root)
	return inst
}

// GetRootAccount gets the "root" account.
// The current root of the merkle tree
func (inst *AssertMerkleTreeAccount) GetRootAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSplAccountCompressionAccount sets the "splAccountCompression" account.
// SPL account compression program
func (inst *AssertMerkleTreeAccount) SetSplAccountCompressionAccount(splAccountCompression ag_solanago.PublicKey) *AssertMerkleTreeAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(splAccountCompression)
	return inst
}

// GetSplAccountCompressionAccount gets the "splAccountCompression" account.
// SPL account compression program
func (inst *AssertMerkleTreeAccount) GetSplAccountCompressionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst AssertMerkleTreeAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AssertMerkleTreeAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AssertMerkleTreeAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AssertMerkleTreeAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LogLevel == nil {
			return errors.New("LogLevel parameter is not set")
		}
		if inst.Assertion == nil {
			return errors.New("Assertion parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TargetMerkleTree is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Root is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SplAccountCompression is not set")
		}
	}
	return nil
}

func (inst *AssertMerkleTreeAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AssertMerkleTreeAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" LogLevel", *inst.LogLevel))
						paramsBranch.Child(ag_format.Param("Assertion", *inst.Assertion))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     targetMerkleTree", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 root", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("splAccountCompression", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj AssertMerkleTreeAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LogLevel` param:
	err = encoder.Encode(obj.LogLevel)
	if err != nil {
		return err
	}
	// Serialize `Assertion` param:
	err = encoder.Encode(obj.Assertion)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AssertMerkleTreeAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LogLevel`:
	err = decoder.Decode(&obj.LogLevel)
	if err != nil {
		return err
	}
	// Deserialize `Assertion`:
	err = decoder.Decode(&obj.Assertion)
	if err != nil {
		return err
	}
	return nil
}

// NewAssertMerkleTreeAccountInstruction declares a new AssertMerkleTreeAccount instruction with the provided parameters and accounts.
func NewAssertMerkleTreeAccountInstruction(
	// Parameters:
	logLevel LogLevel,
	assertion MerkleTreeAssertion,
	// Accounts:
	targetMerkleTree ag_solanago.PublicKey,
	root ag_solanago.PublicKey,
	splAccountCompression ag_solanago.PublicKey) *AssertMerkleTreeAccount {
	return NewAssertMerkleTreeAccountInstructionBuilder().
		SetLogLevel(logLevel).
		SetAssertion(assertion).
		SetTargetMerkleTreeAccount(targetMerkleTree).
		SetRootAccount(root).
		SetSplAccountCompressionAccount(splAccountCompression)
}
