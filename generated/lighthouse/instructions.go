// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lighthouse

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("L2TExMFKdjpN9kozasaurPirfHy9P8sbXoAN1qA3S95")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Lighthouse"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_MemoryWrite = ag_binary.TypeID(ag_binary.TypeIDFromUint8(0))

	Instruction_MemoryClose = ag_binary.TypeID(ag_binary.TypeIDFromUint8(1))

	Instruction_AssertAccountData = ag_binary.TypeID(ag_binary.TypeIDFromUint8(2))

	Instruction_AssertAccountDataMulti = ag_binary.TypeID(ag_binary.TypeIDFromUint8(3))

	Instruction_AssertAccountDelta = ag_binary.TypeID(ag_binary.TypeIDFromUint8(4))

	Instruction_AssertAccountInfo = ag_binary.TypeID(ag_binary.TypeIDFromUint8(5))

	Instruction_AssertAccountInfoMulti = ag_binary.TypeID(ag_binary.TypeIDFromUint8(6))

	Instruction_AssertMintAccount = ag_binary.TypeID(ag_binary.TypeIDFromUint8(7))

	Instruction_AssertMintAccountMulti = ag_binary.TypeID(ag_binary.TypeIDFromUint8(8))

	Instruction_AssertTokenAccount = ag_binary.TypeID(ag_binary.TypeIDFromUint8(9))

	Instruction_AssertTokenAccountMulti = ag_binary.TypeID(ag_binary.TypeIDFromUint8(10))

	Instruction_AssertStakeAccount = ag_binary.TypeID(ag_binary.TypeIDFromUint8(11))

	Instruction_AssertStakeAccountMulti = ag_binary.TypeID(ag_binary.TypeIDFromUint8(12))

	Instruction_AssertUpgradeableLoaderAccount = ag_binary.TypeID(ag_binary.TypeIDFromUint8(13))

	Instruction_AssertUpgradeableLoaderAccountMulti = ag_binary.TypeID(ag_binary.TypeIDFromUint8(14))

	Instruction_AssertSysvarClock = ag_binary.TypeID(ag_binary.TypeIDFromUint8(15))

	Instruction_AssertMerkleTreeAccount = ag_binary.TypeID(ag_binary.TypeIDFromUint8(16))

	Instruction_AssertBubblegumTreeConfigAccount = ag_binary.TypeID(ag_binary.TypeIDFromUint8(17))
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_MemoryWrite:
		return "MemoryWrite"
	case Instruction_MemoryClose:
		return "MemoryClose"
	case Instruction_AssertAccountData:
		return "AssertAccountData"
	case Instruction_AssertAccountDataMulti:
		return "AssertAccountDataMulti"
	case Instruction_AssertAccountDelta:
		return "AssertAccountDelta"
	case Instruction_AssertAccountInfo:
		return "AssertAccountInfo"
	case Instruction_AssertAccountInfoMulti:
		return "AssertAccountInfoMulti"
	case Instruction_AssertMintAccount:
		return "AssertMintAccount"
	case Instruction_AssertMintAccountMulti:
		return "AssertMintAccountMulti"
	case Instruction_AssertTokenAccount:
		return "AssertTokenAccount"
	case Instruction_AssertTokenAccountMulti:
		return "AssertTokenAccountMulti"
	case Instruction_AssertStakeAccount:
		return "AssertStakeAccount"
	case Instruction_AssertStakeAccountMulti:
		return "AssertStakeAccountMulti"
	case Instruction_AssertUpgradeableLoaderAccount:
		return "AssertUpgradeableLoaderAccount"
	case Instruction_AssertUpgradeableLoaderAccountMulti:
		return "AssertUpgradeableLoaderAccountMulti"
	case Instruction_AssertSysvarClock:
		return "AssertSysvarClock"
	case Instruction_AssertMerkleTreeAccount:
		return "AssertMerkleTreeAccount"
	case Instruction_AssertBubblegumTreeConfigAccount:
		return "AssertBubblegumTreeConfigAccount"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"memory_write", (*MemoryWrite)(nil),
		},
		{
			"memory_close", (*MemoryClose)(nil),
		},
		{
			"assert_account_data", (*AssertAccountData)(nil),
		},
		{
			"assert_account_data_multi", (*AssertAccountDataMulti)(nil),
		},
		{
			"assert_account_delta", (*AssertAccountDelta)(nil),
		},
		{
			"assert_account_info", (*AssertAccountInfo)(nil),
		},
		{
			"assert_account_info_multi", (*AssertAccountInfoMulti)(nil),
		},
		{
			"assert_mint_account", (*AssertMintAccount)(nil),
		},
		{
			"assert_mint_account_multi", (*AssertMintAccountMulti)(nil),
		},
		{
			"assert_token_account", (*AssertTokenAccount)(nil),
		},
		{
			"assert_token_account_multi", (*AssertTokenAccountMulti)(nil),
		},
		{
			"assert_stake_account", (*AssertStakeAccount)(nil),
		},
		{
			"assert_stake_account_multi", (*AssertStakeAccountMulti)(nil),
		},
		{
			"assert_upgradeable_loader_account", (*AssertUpgradeableLoaderAccount)(nil),
		},
		{
			"assert_upgradeable_loader_account_multi", (*AssertUpgradeableLoaderAccountMulti)(nil),
		},
		{
			"assert_sysvar_clock", (*AssertSysvarClock)(nil),
		},
		{
			"assert_merkle_tree_account", (*AssertMerkleTreeAccount)(nil),
		},
		{
			"assert_bubblegum_tree_config_account", (*AssertBubblegumTreeConfigAccount)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteUint8(inst.TypeID.Uint8())
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
