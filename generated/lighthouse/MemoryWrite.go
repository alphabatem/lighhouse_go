// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lighthouse

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MemoryWrite is the `MemoryWrite` instruction.
type MemoryWrite struct {
	MemoryId    *uint8
	MemoryBump  *uint8
	WriteOffset *CompactU64
	WriteType   *WriteType

	// [0] = [] programId
	// ··········· Lighthouse program
	//
	// [1] = [] systemProgram
	// ··········· System program
	//
	// [2] = [WRITE, SIGNER] payer
	// ··········· Payer account
	//
	// [3] = [WRITE] memory
	// ··········· Memory account
	//
	// [4] = [] sourceAccount
	// ··········· Account to be written to memory
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMemoryWriteInstructionBuilder creates a new `MemoryWrite` instruction builder.
func NewMemoryWriteInstructionBuilder() *MemoryWrite {
	nd := &MemoryWrite{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetMemoryId sets the "memoryId" parameter.
func (inst *MemoryWrite) SetMemoryId(memoryId uint8) *MemoryWrite {
	inst.MemoryId = &memoryId
	return inst
}

// SetMemoryBump sets the "memoryBump" parameter.
func (inst *MemoryWrite) SetMemoryBump(memoryBump uint8) *MemoryWrite {
	inst.MemoryBump = &memoryBump
	return inst
}

// SetWriteOffset sets the "writeOffset" parameter.
func (inst *MemoryWrite) SetWriteOffset(writeOffset CompactU64) *MemoryWrite {
	inst.WriteOffset = &writeOffset
	return inst
}

// SetWriteType sets the "writeType" parameter.
func (inst *MemoryWrite) SetWriteType(writeType WriteType) *MemoryWrite {
	inst.WriteType = &writeType
	return inst
}

// SetProgramIdAccount sets the "programId" account.
// Lighthouse program
func (inst *MemoryWrite) SetProgramIdAccount(programId ag_solanago.PublicKey) *MemoryWrite {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(programId)
	return inst
}

// GetProgramIdAccount gets the "programId" account.
// Lighthouse program
func (inst *MemoryWrite) GetProgramIdAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSystemProgramAccount sets the "systemProgram" account.
// System program
func (inst *MemoryWrite) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MemoryWrite {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
// System program
func (inst *MemoryWrite) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayerAccount sets the "payer" account.
// Payer account
func (inst *MemoryWrite) SetPayerAccount(payer ag_solanago.PublicKey) *MemoryWrite {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer account
func (inst *MemoryWrite) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMemoryAccount sets the "memory" account.
// Memory account
func (inst *MemoryWrite) SetMemoryAccount(memory ag_solanago.PublicKey) *MemoryWrite {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(memory).WRITE()
	return inst
}

// GetMemoryAccount gets the "memory" account.
// Memory account
func (inst *MemoryWrite) GetMemoryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSourceAccountAccount sets the "sourceAccount" account.
// Account to be written to memory
func (inst *MemoryWrite) SetSourceAccountAccount(sourceAccount ag_solanago.PublicKey) *MemoryWrite {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(sourceAccount)
	return inst
}

// GetSourceAccountAccount gets the "sourceAccount" account.
// Account to be written to memory
func (inst *MemoryWrite) GetSourceAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst MemoryWrite) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MemoryWrite,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MemoryWrite) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MemoryWrite) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MemoryId == nil {
			return errors.New("MemoryId parameter is not set")
		}
		if inst.MemoryBump == nil {
			return errors.New("MemoryBump parameter is not set")
		}
		if inst.WriteOffset == nil {
			return errors.New("WriteOffset parameter is not set")
		}
		if inst.WriteType == nil {
			return errors.New("WriteType parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ProgramId is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Memory is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SourceAccount is not set")
		}
	}
	return nil
}

func (inst *MemoryWrite) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MemoryWrite")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   MemoryId", *inst.MemoryId))
						paramsBranch.Child(ag_format.Param(" MemoryBump", *inst.MemoryBump))
						paramsBranch.Child(ag_format.Param("WriteOffset", *inst.WriteOffset))
						paramsBranch.Child(ag_format.Param("  WriteType", *inst.WriteType))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    programId", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       memory", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       source", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj MemoryWrite) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MemoryId` param:
	err = encoder.Encode(obj.MemoryId)
	if err != nil {
		return err
	}
	// Serialize `MemoryBump` param:
	err = encoder.Encode(obj.MemoryBump)
	if err != nil {
		return err
	}
	// Serialize `WriteOffset` param:
	err = encoder.Encode(obj.WriteOffset)
	if err != nil {
		return err
	}
	// Serialize `WriteType` param:
	err = encoder.Encode(obj.WriteType)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MemoryWrite) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MemoryId`:
	err = decoder.Decode(&obj.MemoryId)
	if err != nil {
		return err
	}
	// Deserialize `MemoryBump`:
	err = decoder.Decode(&obj.MemoryBump)
	if err != nil {
		return err
	}
	// Deserialize `WriteOffset`:
	err = decoder.Decode(&obj.WriteOffset)
	if err != nil {
		return err
	}
	// Deserialize `WriteType`:
	err = decoder.Decode(&obj.WriteType)
	if err != nil {
		return err
	}
	return nil
}

// NewMemoryWriteInstruction declares a new MemoryWrite instruction with the provided parameters and accounts.
func NewMemoryWriteInstruction(
	// Parameters:
	memoryId uint8,
	memoryBump uint8,
	writeOffset CompactU64,
	writeType WriteType,
	// Accounts:
	programId ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	memory ag_solanago.PublicKey,
	sourceAccount ag_solanago.PublicKey) *MemoryWrite {
	return NewMemoryWriteInstructionBuilder().
		SetMemoryId(memoryId).
		SetMemoryBump(memoryBump).
		SetWriteOffset(writeOffset).
		SetWriteType(writeType).
		SetProgramIdAccount(programId).
		SetSystemProgramAccount(systemProgram).
		SetPayerAccount(payer).
		SetMemoryAccount(memory).
		SetSourceAccountAccount(sourceAccount)
}
