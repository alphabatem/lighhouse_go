// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package lighthouse

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AssertStakeAccountMulti is the `AssertStakeAccountMulti` instruction.
type AssertStakeAccountMulti struct {
	LogLevel   *LogLevel
	Assertions *StakeAccountAssertions

	// [0] = [] targetAccount
	// ··········· Target account to be asserted
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAssertStakeAccountMultiInstructionBuilder creates a new `AssertStakeAccountMulti` instruction builder.
func NewAssertStakeAccountMultiInstructionBuilder() *AssertStakeAccountMulti {
	nd := &AssertStakeAccountMulti{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetLogLevel sets the "logLevel" parameter.
func (inst *AssertStakeAccountMulti) SetLogLevel(logLevel LogLevel) *AssertStakeAccountMulti {
	inst.LogLevel = &logLevel
	return inst
}

// SetAssertions sets the "assertions" parameter.
func (inst *AssertStakeAccountMulti) SetAssertions(assertions StakeAccountAssertions) *AssertStakeAccountMulti {
	inst.Assertions = &assertions
	return inst
}

// SetTargetAccountAccount sets the "targetAccount" account.
// Target account to be asserted
func (inst *AssertStakeAccountMulti) SetTargetAccountAccount(targetAccount ag_solanago.PublicKey) *AssertStakeAccountMulti {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(targetAccount)
	return inst
}

// GetTargetAccountAccount gets the "targetAccount" account.
// Target account to be asserted
func (inst *AssertStakeAccountMulti) GetTargetAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst AssertStakeAccountMulti) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AssertStakeAccountMulti,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AssertStakeAccountMulti) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AssertStakeAccountMulti) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LogLevel == nil {
			return errors.New("LogLevel parameter is not set")
		}
		if inst.Assertions == nil {
			return errors.New("Assertions parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TargetAccount is not set")
		}
	}
	return nil
}

func (inst *AssertStakeAccountMulti) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AssertStakeAccountMulti")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  LogLevel", *inst.LogLevel))
						paramsBranch.Child(ag_format.Param("Assertions", *inst.Assertions))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("target", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj AssertStakeAccountMulti) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LogLevel` param:
	err = encoder.Encode(obj.LogLevel)
	if err != nil {
		return err
	}
	// Serialize `Assertions` param:
	err = encoder.Encode(obj.Assertions)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AssertStakeAccountMulti) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LogLevel`:
	err = decoder.Decode(&obj.LogLevel)
	if err != nil {
		return err
	}
	// Deserialize `Assertions`:
	err = decoder.Decode(&obj.Assertions)
	if err != nil {
		return err
	}
	return nil
}

// NewAssertStakeAccountMultiInstruction declares a new AssertStakeAccountMulti instruction with the provided parameters and accounts.
func NewAssertStakeAccountMultiInstruction(
	// Parameters:
	logLevel LogLevel,
	assertions StakeAccountAssertions,
	// Accounts:
	targetAccount ag_solanago.PublicKey) *AssertStakeAccountMulti {
	return NewAssertStakeAccountMultiInstructionBuilder().
		SetLogLevel(logLevel).
		SetAssertions(assertions).
		SetTargetAccountAccount(targetAccount)
}
